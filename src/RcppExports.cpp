// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rrho_hyper_overlap_cpp
List rrho_hyper_overlap_cpp(CharacterVector sample1, CharacterVector sample2, int stepsize);
RcppExport SEXP _biomisc_rrho_hyper_overlap_cpp(SEXP sample1SEXP, SEXP sample2SEXP, SEXP stepsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type sample1(sample1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sample2(sample2SEXP);
    Rcpp::traits::input_parameter< int >::type stepsize(stepsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(rrho_hyper_overlap_cpp(sample1, sample2, stepsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_biomisc_rrho_hyper_overlap_cpp", (DL_FUNC) &_biomisc_rrho_hyper_overlap_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_biomisc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
